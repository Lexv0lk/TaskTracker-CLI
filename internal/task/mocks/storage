// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_task is a generated GoMock package.
package mock_task

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskStorage is a mock of TaskStorage interface.
type MockTaskStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStorageMockRecorder
}

// MockTaskStorageMockRecorder is the mock recorder for MockTaskStorage.
type MockTaskStorageMockRecorder struct {
	mock *MockTaskStorage
}

// NewMockTaskStorage creates a new mock instance.
func NewMockTaskStorage(ctrl *gomock.Controller) *MockTaskStorage {
	mock := &MockTaskStorage{ctrl: ctrl}
	mock.recorder = &MockTaskStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStorage) EXPECT() *MockTaskStorageMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockTaskStorage) Load() ([]task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].([]task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockTaskStorageMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockTaskStorage)(nil).Load))
}

// Save mocks base method.
func (m *MockTaskStorage) Save(tasks []task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTaskStorageMockRecorder) Save(tasks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTaskStorage)(nil).Save), tasks)
}
